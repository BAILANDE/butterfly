<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>公司注册流程</title>
    <url>/2025/06/02/%E5%85%AC%E5%8F%B8%E6%B3%A8%E5%86%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="公司注册流程（随时修改）"><a href="#公司注册流程（随时修改）" class="headerlink" title="公司注册流程（随时修改）"></a>公司注册流程（随时修改）</h1><p><strong>有限责任公司（内资）</strong> 注册为例的通用流程详解：</p>
<h2 id="📌-核心步骤-以“有限责任公司”为例"><a href="#📌-核心步骤-以“有限责任公司”为例" class="headerlink" title="📌 核心步骤 (以“有限责任公司”为例)"></a>📌 核心步骤 (以“有限责任公司”为例)</h2><ol>
<li><p><strong><strong>（0）前期准备与规划</strong> (非常重要！)</strong></p>
<ul>
<li><strong>确定公司基本信息：</strong><ul>
<li><strong>公司名称：</strong> 想好2-5个备选名称（按优先级），需符合《企业名称登记管理规定》（格式：行政区划+字号+行业特点+组织形式，如：深圳市XX科技有限公司）。需通过名称预先核准。</li>
<li><strong>注册资本：</strong> 确定金额（认缴制，但需合理！），明确股东的认缴出资额、出资方式（货币&#x2F;非货币）、出资期限（可在章程中约定，最长不超经营期限）。现在大部分行业无最低门槛，但部分特殊行业仍有要求（咨询当地政策）。</li>
<li><strong>经营范围：</strong> 明确主营和兼营业务，需符合《国民经济行业分类》标准。在工商系统填写规范条目。经营范围和税务核定有关，需仔细斟酌。</li>
<li><strong>注册地址：</strong> 确定可用于工商登记注册的真实经营场所地址（需提供地址证明材料，如房产证、租赁合同、场地使用证明等）。各地对注册地址要求不同，有的地方要求商业性质房产。</li>
<li><strong>公司类型：</strong> 确定是有限责任公司、股份有限公司等。这里主要讲有限责任公司。</li>
<li><strong>经营期限：</strong> 一般可选择10年、20年或长期。</li>
</ul>
</li>
<li><strong>确定股东结构及股权比例：</strong> 明确所有股东（自然人、企业法人），各自持股比例。</li>
<li><strong>法定代表人、董事、监事、高级管理人员：</strong> 确定法定代表人人选（需符合任职资格）、执行董事（或董事会成员）、监事（不可由法人兼任）。明确经理等高管（如有）。</li>
<li><strong>草拟公司章程：</strong> 这是公司的“根本大法”，需由全体股东签署。可参考模板，但建议根据公司情况调整，必要时咨询律师。</li>
<li><strong>前置审批：</strong> 如果从事的行业需要政府特殊许可（如食品经营许可证、医疗器械许可证等），需在注册登记前向相关部门申请并获得批准文件。</li>
</ul>
</li>
<li><p><strong>（1）公司名称预先核准</strong></p>
<ul>
<li>在目标公司注册地的市场监督管理局（原工商局）官网进行名称自主申报或线下到窗口提交《企业名称预先核准申请书》。通过后，会获得《企业名称预先核准通知书》（有效期通常6个月）。</li>
</ul>
</li>
<li><p><strong>（2）准备齐全注册材料</strong></p>
<ul>
<li>材料清单通常是：<ul>
<li>《公司设立登记申请书》（在线或窗口领取）</li>
<li>全体股东签署的《公司章程》（原件）</li>
<li>股东的主体资格证明：<ul>
<li>自然人股东：身份证复印件（核对原件）。</li>
<li>企业法人股东：该公司的营业执照副本复印件（加盖公章）。</li>
</ul>
</li>
<li>法定代表人、董事、监事、经理的任职文件（通常是股东会决议、董事会决议）及其身份证明复印件（核对原件）。</li>
<li>注册地址使用证明：<ul>
<li>自有房产：提供房产证复印件（核对原件）。</li>
<li>租赁房产：提供租赁协议原件（通常在工商系统网签或提交纸质）及出租方产权证复印件（需出租方盖章或房东签字）。</li>
<li>其它形式的地址证明需按当地规定提供。</li>
</ul>
</li>
<li>《企业名称预先核准通知书》</li>
<li>如涉及前置审批的，提供相关批准文件或许可证书（复印件）。</li>
<li>承诺书（如注册地址信息真实性承诺书等）。</li>
<li>(非必须但建议)如法定代表人不是股东，可能需要授权委托书。</li>
</ul>
</li>
<li><strong>注意：</strong> 所有提交的复印件材料需标注“与原件一致”，并由股东或经办人签字（或盖章）。</li>
</ul>
</li>
<li><p><strong>（3）提交申请 &amp; 工商注册登记</strong></p>
<ul>
<li>最常用的方式是通过当地政务服务网&#x2F;市场监督管理局网站进行全程电子化登记（强烈推荐💡）。上传或填写所有材料电子版。</li>
<li>也可以到注册地政务服务中心的市场监督管理局窗口提交纸质材料。</li>
<li><strong>核心领取证件：</strong><ul>
<li>如果审核通过，市场监管部门会签发《营业执照》正、副本。（这是证明公司合法存在的最关键文件，也是后续办手续的基础）</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>（4）刻制印章</strong></p>
<ul>
<li>凭营业执照原件、法定代表人身份证明原件（或经办人带委托书），到公安局指定或备案的刻章点刻制公司印章：<ul>
<li>公章（公司名义对外使用的行政印章）</li>
<li>财务专用章</li>
<li>发票专用章（用于开具发票）</li>
<li>合同专用章（可选，也可用公章代替）</li>
<li>法定代表人名章（银行开户常用）</li>
</ul>
</li>
<li>领取刻章备案证明或在网上完成备案（部分地区与刻章环节合并）。</li>
</ul>
</li>
<li><p><strong>（5）银行开设基本存款账户</strong></p>
<ul>
<li>选择一家银行网点开设公司对公基本户（用于日常经营收支、扣税、社保、工资发放等核心账户）。</li>
<li>所需材料通常包括：营业执照正本、公司章程、法定代表人身份证、经办人身份证（如非法人）、公章、财务章、法人名章（俗称“印鉴章”）、股东名册等（银行会提供详细清单）。法人和经办人需到场。开户许可证（也叫基本存款账户信息）会发给公司。</li>
</ul>
</li>
<li><p><strong>（6）税务登记（开业登记）</strong></p>
<ul>
<li>完成工商注册后，<strong>必须</strong>在拿到营业执照后30日内到公司所在地主管税务机关办理税务登记（现在很多地方已实现工商登记信息自动同步到税务系统，但还需企业主动完成“补录”和后续操作）。可通过电子税务局线上办理或到税务大厅办理。</li>
<li><strong>关键步骤：</strong><ul>
<li><strong>核定税种、税率：</strong> 根据经营范围，税务局核定公司需要缴纳的税种（如增值税、企业所得税、城建税、教育费附加等）、征收方式（查账征收或核定征收）、开票类型（普票、专票）等。小规模纳税人和一般纳税人的身份在此确认或后续申请转换。</li>
<li><strong>签订三方协议：</strong> 与税务机关、银行签订税库银三方缴税协议，用于后续电子缴税（扣税直接从银行账户划走）。需要带上开户许可证（或基本存款账户信息表）、公章等。</li>
<li><strong>申请发票：</strong> 如有开票需求，向税务局申请领取税控设备（金税盘、税控盘或UK）及发票（需要先完成票种核定）。</li>
<li><strong>登记为增值税一般纳税人（如需要）：</strong> 如果预计年销售额超标或有其他需要，可主动申请登记为一般纳税人。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>（7）社保、公积金开户</strong></p>
<ul>
<li>如果公司需要雇佣员工，必须在成立后30日内到公司所在地的社保经办机构和公积金管理中心办理单位社保账户和公积金账户开户。可通过线上平台或到窗口办理。</li>
</ul>
</li>
</ol>
<h2 id="📌-注册完成后的重要后续工作-企业运营的基础"><a href="#📌-注册完成后的重要后续工作-企业运营的基础" class="headerlink" title="📌 注册完成后的重要后续工作 (企业运营的基础)"></a>📌 注册完成后的重要后续工作 (企业运营的基础)</h2><ol>
<li><strong>记账报税：</strong> 公司注册成立后，无论是否有收入、是否开业，<strong>都必须</strong>按规定建立账簿，按时进行纳税申报（通常是月度或季度），否则会产生罚款甚至影响信用。聘请专职会计或找专业的代理记账公司是常见的做法。</li>
<li><strong>工商年报公示：</strong> 公司成立后的每一年1月1日至6月30日，需通过国家企业信用信息公示系统报送上一年度的年度报告（经营情况、股东出资情况、联系方式等），并向社会公示。逾期或虚假填报将被列入经营异常名录。</li>
<li><strong>银行账户维护：</strong> 保持账户正常使用，避免长期不使用被冻结。</li>
<li><strong>知识产权保护（如适用）：</strong> 及时注册商标、申请专利等。</li>
<li><strong>行业许可证延续（如适用）：</strong> 前置或后置许可到期前及时办理延续。</li>
<li><strong>变更登记：</strong> 如公司名称、地址、注册资本、经营范围、法人、股东等发生变化，<strong>必须</strong>及时办理工商变更登记手续。</li>
</ol>
<h2 id="📌-重要提示"><a href="#📌-重要提示" class="headerlink" title="📌 重要提示"></a>📌 重要提示</h2><ul>
<li><strong>地区差异：</strong> 不同省份、城市的详细流程、所需材料可能略有不同。务必查询当地市场监督管理局官网或政务服务中心网站获取最准确、最新的指南和表格下载。</li>
<li><strong>全程电子化：</strong> 强烈推荐通过当地政务服务网或市场监督管理局网上办事平台全程在线办理，高效便捷。</li>
<li><strong>法定时限：</strong> 各环节有法定时间要求（如拿到执照后30日内办税务、社保开户），务必按时完成，避免罚款和经营异常。</li>
<li><strong>专业协助：</strong> 如果觉得流程复杂或没有时间，可以委托专业的注册代理公司或会计师事务所办理（涉及法律文书和财务时尤其建议咨询专业人士👨）。</li>
<li><strong>准备充分：</strong> 前期准备一定要做足，特别是名称、地址、经营范围、章程等重要事项，避免在后续环节被驳回或产生法律风险。</li>
<li><strong>费用：</strong> 注册费用包括：工商登记（免费）、刻章费（几百元不等）、银行开户费&#x2F;年费（几百到上千）、税控设备费（几百元）、代理记账费（如果委托，每月几百不等）等。注册资本认缴制下，实缴出资成本另算。</li>
</ul>
]]></content>
      <categories>
        <category>创业</category>
      </categories>
      <tags>
        <tag>创业</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记</title>
    <url>/2025/09/20/python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="python学习笔记"><a href="#python学习笔记" class="headerlink" title="python学习笔记"></a>python学习笔记</h1><blockquote>
<p>尽管作者并没有计算机专业的背景，也没有接受过正规的Python教育，但正是出于对编程的浓厚兴趣，驱使他开始了这段学习之&gt;旅。他的学习材料主要来源于网络资源和各种书籍。因此，笔记中的内容可能会显得有些分散，但作者正在努力将这些知识点整合起来，以便为读者提供一个更加流畅和连贯的学习体验。</p>
</blockquote>
<p><strong>笔记仅供参考，如有错误请在评论区指出或联系作者</strong></p>
<p>解释一下为什么学习python：</p>
<ol>
<li><p><strong>易于上手</strong>：Python 的语法简洁明了，非常适合编程新手作为入门语言。</p>
</li>
<li><p><strong>应用广泛</strong>：Python 在 Web 开发、数据分析、人工智能、科学计算、自动化脚本和网络爬虫等多个领域都有广泛的应用。</p>
</li>
<li><p><strong>活跃的社区</strong>：Python 拥有一个非常活跃的社区，提供了大量的资源、工具和框架，以及解决问题的支持。</p>
</li>
<li><p><strong>丰富的库和框架</strong>：Python 拥有丰富的第三方库和框架，如 NumPy、Pandas、Django、Flask、TensorFlow 等，这些库简化了在各个领域的开发工作。</p>
</li>
<li><p><strong>数据科学和机器学习的首选</strong>：Python 是数据科学和机器学习领域的首选语言，它的强大数据处理能力和与数据可视化库的无缝集成使其备受青睐。</p>
</li>
<li><p><strong>跨平台兼容性</strong>：Python 是一种跨平台的语言，可以在 Windows、macOS 和 Linux 等多种操作系统上运行。</p>
</li>
<li><p><strong>编程范式的灵活性</strong>：Python 支持多种编程范式，包括面向对象、命令式、函数式和过程式编程，为开发者提供了灵活性。</p>
</li>
<li><p><strong>职业前景广阔</strong>：随着对 Python 开发者的需求不断增长，掌握 Python 技能可以开启更多的就业机会和更高的薪资待遇。</p>
</li>
<li><p><strong>自动化和脚本编写</strong>：Python 常用于编写自动化脚本，可以自动化日常任务，从而提高工作效率。</p>
</li>
<li><p><strong>教育领域的应用</strong>：许多教育机构和在线课程选择 Python 作为教学语言，因为它有助于学生更快地掌握编程概念。</p>
</li>
<li><p><strong>快速开发和原型设计</strong>：Python 的快速开发能力使其在快速原型设计和迭代开发中非常有用。</p>
</li>
<li><p><strong>云计算的广泛应用</strong>：Python 在 AWS、Azure 和 Google Cloud Platform 等云计算服务中也有广泛的应用。</p>
</li>
<li><p><strong>可扩展性</strong>：Python 程序可以轻松扩展，以处理更大的工作负载或更复杂的任务。</p>
</li>
<li><p><strong>开源和免费</strong>：Python 是开源的，这意味着它是免费使用的，并且有一个持续更新和改进的代码库。</p>
</li>
</ol>
<p>总结来说，Python 的多功能性、易用性和强大的社区支持使其成为学习编程的理想选择。</p>
<h2 id="python基本概述"><a href="#python基本概述" class="headerlink" title="python基本概述"></a>python基本概述</h2><ul>
<li>参考<a href="https://baike.baidu.com/item/Python/407313?fromModule=disambiguation">百度百科</a></li>
<li><a href="https://www.python.org/">python官网</a></li>
</ul>
<h2 id="python的IDE"><a href="#python的IDE" class="headerlink" title="python的IDE"></a>python的IDE</h2><ul>
<li><p>以下是目前最强大的10个Python IDE，包括了它们的主要特点以及官方网站的链接：</p>
<ol>
<li><p><strong>PyCharm</strong>：由 JetBrains 开发，适合专业开发者，支持大型Python项目开发，有免费社区版和付费专业版。</p>
<ul>
<li>官网链接：<a href="https://www.jetbrains.com/pycharm/">PyCharm</a></li>
</ul>
</li>
<li><p><strong>Visual Studio Code</strong>：微软开发的轻量级但功能强大的编辑器，支持Python开发，可以通过安装扩展来增强功能。</p>
<ul>
<li>官网链接：<a href="https://code.visualstudio.com/">Visual Studio Code</a></li>
</ul>
</li>
<li><p><strong>Sublime Text</strong>：高度可定制的代码编辑器，支持多种语言，包括Python，以其速度和灵活性而闻名。</p>
<ul>
<li>官网链接：<a href="https://www.sublimetext.com/">Sublime Text</a></li>
</ul>
</li>
<li><p><strong>Atom</strong>：由GitHub开发的开源编辑器，可定制性强，支持Python开发。</p>
<ul>
<li>官网链接：<a href="https://atom-editor.cc/">Atom</a></li>
</ul>
</li>
<li><p><strong>Jupyter Notebook</strong>：适合数据科学和交互式编程，支持多种编程语言，包括Python。</p>
<ul>
<li>官网链接：<a href="https://jupyter.org/">Jupyter Notebook</a></li>
</ul>
</li>
<li><p><strong>Spyder</strong>：科学计算和数据分析的IDE，与Anaconda发行版捆绑，适合进行科学计算和数据分析。</p>
<ul>
<li>官网链接：<a href="https://www.spyder-ide.org/">Spyder IDE</a></li>
</ul>
</li>
<li><p><strong>Eclipse with PyDev</strong>：Eclipse是一个开源的IDE，通过PyDev插件支持Python开发。</p>
<ul>
<li>官网链接：<a href="https://marketplace.eclipse.org/content/pydev-python-ide-eclipse">PyDev</a></li>
</ul>
</li>
<li><p><strong>Wing IDE</strong>：提供强大的调试和代码分析工具，支持远程开发，适合专业开发者。</p>
<ul>
<li>官网链接：<a href="https://wingware.com/downloads">Wing IDE</a></li>
</ul>
</li>
<li><p><strong>Vim</strong>：高度可配置的文本编辑器，通过插件支持Python开发，适合喜欢使用键盘的高级用户。</p>
<ul>
<li>官网链接：<a href="https://www.vim.org/">Vim</a></li>
</ul>
</li>
<li><p><strong>Emacs</strong>：可扩展的、自定义的文本编辑器，支持Python编辑，适合喜欢深度定制自己编辑器的用户。</p>
<ul>
<li>官网链接：<a href="https://www.gnu.org/software/emacs/">Emacs</a></li>
</ul>
</li>
</ol>
</li>
<li><p>这些IDE各有特点，适合不同需求和场景的Python开发。</p>
</li>
<li><p>我所使用的是PyCharm，PyCharm 是由 JetBrains 公司开发的一款流行的 Python 集成开发环境（IDE）。它被广泛认为是 Python 编程语言中最强大的 IDE 之一，特别适合进行大型项目的开发。PyCharm 提供了许多为 Python 开发设计的强大功能。</p>
</li>
<li><p>PyCharm分为两个版本：免费的 Community Edition 和付费的 Professional Edition。Community Edition 提供了基本的 Python 开发功能，而 Professional Edition 则提供了更多的企业级功能，如 Web 开发、数据库工具、远程开发等。</p>
</li>
<li><p>对于刚开始接触Python的新手来说，首要任务是熟悉Python的开发环境配置以及安装一个合适的集成开发环境（IDE）。以下是一些建议：</p>
<ol>
<li><p><strong>安装Python</strong>：</p>
<ul>
<li>首先，访问Python的官方网站下载适合您操作系统的Python版本。</li>
<li>安装Python时，确保勾选了“Add Python to PATH”选项，这样可以在命令行中方便地调用Python。</li>
</ul>
</li>
<li><p><strong>配置环境</strong>：</p>
<ul>
<li>验证安装是否成功，可以在命令行中输入<code>python --version</code>或<code>python3 --version</code>来检查Python的版本。</li>
<li>了解如何创建和激活虚拟环境，这对于管理不同项目的依赖非常有用。</li>
</ul>
</li>
<li><p><strong>选择IDE</strong>：</p>
<ul>
<li>选择一个功能强大且易于使用的IDE，如PyCharm、Visual Studio Code（VSCode）、Eclipse（配合PyDev插件）等。</li>
<li>安装IDE，并熟悉其基本功能，如代码高亮、自动补全、代码调试等。</li>
</ul>
</li>
<li><p><strong>设置IDE</strong>：</p>
<ul>
<li>在IDE中配置Python解释器，确保它指向了正确安装的Python版本。</li>
<li>探索和安装必要的插件或扩展，以增强IDE的功能。</li>
</ul>
</li>
<li><p><strong>编写Hello World</strong>：</p>
<ul>
<li>在IDE中创建您的第一个Python脚本，编写经典的“Hello, World!”程序，并运行它以验证环境配置是否正确。</li>
</ul>
</li>
<li><p><strong>寻求帮助</strong>：</p>
<ul>
<li>如果在配置环境或安装IDE时遇到问题，不要犹豫，寻求社区的帮助或查阅相关文档。</li>
</ul>
</li>
</ol>
</li>
<li><p>记住，一个舒适且功能齐全的开发环境是高效编程的基础。花时间正确设置您的环境，将有助于您更顺利地开始Python学习之旅。如果您遇到困难或不确定如何进行，请参考bilibili up主 **<a href="https://www.bilibili.com/video/BV1jgWLeREbp?t=288.3">年年吃布饱的视频</a>**（点击此处精准空降原视频）。</p>
</li>
<li><p>视频作者主页: <strong><a href="https://space.bilibili.com/3546660779068014">点此跳转</a></strong></p>
</li>
</ul>
<div class="video-container">
  <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113004884527853&bvid=BV1jgWLeREbp&cid=500001658178767&p=1Autoplay=0" allowfullscreen></iframe>
</div>

<ul>
<li><p>对于刚开始学习编程的新手来说，<strong>免费的PyCharm社区版（PyCharm Community Edition）</strong>已经足够满足基本的编程需求。</p>
<ul>
<li><a href="https://www.jetbrains.com/pycharm/download/?section=windows">下载PyCharm社区版</a></li>
</ul>
</li>
<li><p>在阅读了前面的介绍之后，您对Python已经有了初步的认识。现在，让我们正式踏上Python的学习之旅。</p>
</li>
<li><p>为了使您的编程体验更加流畅，您可以先对PyCharm进行一些优化设置，以确保它更加符合您的工作习惯，例如</p>
<ul>
<li>设置所需快捷键。<ul>
<li>ctrl+向上滚动滚轮为字体放大</li>
<li>ctrl+向下滚动滚轮为字体缩小</li>
<li>………………</li>
</ul>
</li>
<li>配置所需插件<ul>
<li>汉化包（帮助我们更好的使用PyCharm）</li>
<li>翻译插件（帮助我们理解英文代码和注释）</li>
</ul>
</li>
<li>设置自己喜欢的主题</li>
</ul>
</li>
</ul>
<h2 id="python，从此处开始"><a href="#python，从此处开始" class="headerlink" title="python，从此处开始"></a>python，从此处开始</h2><h3 id="python基础语法"><a href="#python基础语法" class="headerlink" title="python基础语法"></a>python基础语法</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><ol>
<li><p>字面量的含义：在代码中被写下来的、固定的值。称之为字面量</p>
</li>
<li><p>常见字面量的类型<br>目前先了解整数、浮点数、字符串即可</p>
</li>
<li><p>基于print语句完成各类字面量的输出</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">13.14</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>在程序代码中，对代码进行解释说明的文字确实被称为注释，这些注释不会被系统执行。根据你的描述，我们可以将注释分为以下两种：</p>
<ol>
<li><p><strong>单行注释</strong>：</p>
<ul>
<li>这是最常见的注释方式，通常用于解释代码中的某一行或几行。</li>
<li>单行注释以特定的符号开始，比如在Python中是 <code>#</code>。</li>
<li>单行注释仅对紧随其后的一行代码有效。</li>
</ul>
<p>示例（Python）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个单行注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)  <span class="comment"># 这行代码会打印 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注：一般建议”#”和注释内容之间用空格隔开</li>
</ul>
</li>
<li><p><strong>多行注释</strong>：</p>
<ul>
<li>多行注释用于跨越多行的解释说明。</li>
<li>在某些语言中，可以使用特定的多行注释语法，而在Python中，通常使用三个连续的单引号 <code>&#39;&#39;&#39;</code> 或双引号 <code>&quot;&quot;&quot;</code> 来创建多行字符串，虽然它们主要用于文档字符串（docstrings），但也可以用来创建多行注释。</li>
<li>多行注释可以包含在代码块的开始处，用于解释整个函数、类或模块。</li>
</ul>
<p>示例（Python）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是一个多行注释</span></span><br><span class="line"><span class="string">可以跨越多行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>在实际编程中，注释的使用应该简洁明了，避免冗余，同时确保它们能够为代码的阅读者提供有价值的信息。此外，注释应该随着代码的更新而更新，以保持代码的准确性和可维护性。</p>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul>
<li>变量：在程序运行时，能够存储计算结果或能表示值的抽象概念，简单的说，变量就是在程序运行时，记录数据用的。</li>
<li>变量的定义格式<ul>
<li>变量名 &#x3D; 变量值</li>
<li>每个变量都有自己的名称，称之为“变量名”，即变量本身。</li>
<li>每个变量都有自己存储的值（内容），称之为“变量值”。</li>
<li>“&#x3D;”表示赋值，将右侧的值赋予左侧的变量。</li>
</ul>
</li>
<li>需注意，变量的值<strong>是可以发生改变的</strong>，下面是一个示例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化变量money，表示钱包中的初始金额</span></span><br><span class="line">money = <span class="number">50</span></span><br><span class="line"><span class="comment"># 打印初始金额，单位是人民币</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;钱包还有：&quot;</span>, money, <span class="string">&quot;人民币&quot;</span>)</span><br><span class="line"><span class="comment"># 购买一个汉堡，花费10元人民币，从钱包中减去10元</span></span><br><span class="line">money = money-<span class="number">10</span>  </span><br><span class="line"><span class="comment"># 打印购买汉堡后的剩余金额</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;钱包还有：&quot;</span>, money, <span class="string">&quot;人民币&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>拓展：</p>
<ol>
<li>print语句如何输出多份内容？<br>   答：使用”,”隔开，例如：   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(内容<span class="number">1</span>,内容<span class="number">2</span>, 内容<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li>
<li>python如何使用加减乘除？<br>   答：+（加）、-（减）、*（乘）、&#x2F;（除）</li>
</ol>
</blockquote>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul>
<li><p>在之前的学习中，我们了解到数据是有类型的，目前的学习我们主要接触三类数据类型。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>string</td>
<td>字符串类型</td>
<td>有引号引起来的数据都是字符串</td>
</tr>
<tr>
<td>int</td>
<td>整型（有符号）</td>
<td>数字类型，存放整数 如-1，10,20,0等</td>
</tr>
<tr>
<td>float</td>
<td>浮点型（有符号）</td>
<td>数字类型，存放小数 如1.3，-3.4,20.24等</td>
</tr>
</tbody></table>
</li>
<li><p>那么问题来了，怎么判断数据的类型呢？这里我们有三种方法：</p>
<ol>
<li>在print语句中，直接输出类型信息。</li>
<li>用变量存储type()的结果（返回值）。</li>
<li>使用type()语句查看变量中存储的数据类型。<ul>
<li><strong>这里要注意，变量是没有类型的，我们查看的是变量存储的数据类型</strong></li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.在print语句中，直接输出类型信息(方法1)</span><br><span class="line"></span><br><span class="line"># 打印字符串 &quot;hello，world&quot; 的数据类型</span><br><span class="line">print(type(&quot;hello，world&quot;))  # 输出: &lt;class &#x27;str&#x27;&gt;</span><br><span class="line"># 打印整数 2024 的数据类型</span><br><span class="line">print(type(2024))  # 输出: &lt;class &#x27;int&#x27;&gt;</span><br><span class="line"># 打印浮点数 20.24 的数据类型</span><br><span class="line">print(type(20.24))  # 输出: &lt;class &#x27;float&#x27;&gt;</span><br><span class="line"></span><br><span class="line"># 2.用变量存储type()的结果(方法2)</span><br><span class="line"></span><br><span class="line"># 获取字符串 &quot;hello world&quot; 的数据类型</span><br><span class="line">A = type(&quot;hello world&quot;)</span><br><span class="line"># 获取整数 2024 的数据类型</span><br><span class="line">B = type(2024)</span><br><span class="line"># 获取浮点数 20.24 的数据类型</span><br><span class="line">C = type(20.24)</span><br><span class="line"># 打印字符串 &quot;hello world&quot; 的数据类型，结果将是 &lt;class &#x27;str&#x27;&gt;</span><br><span class="line">print(A)</span><br><span class="line"># 打印整数 2024 的数据类型，结果将是 &lt;class &#x27;int&#x27;&gt;</span><br><span class="line">print(B)</span><br><span class="line"># 打印浮点数 20.24 的数据类型，结果将是 &lt;class &#x27;float&#x27;&gt;</span><br><span class="line">print(C)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3.使用type()语句查看变量中存储的数据类型(方法3)</span><br><span class="line">D = &quot;hello world&quot;  # 定义一个字符串变量D</span><br><span class="line">F = type(D)  # 获取变量D的数据类型并赋值给变量F</span><br><span class="line">print(F)  # 打印变量F，即变量D的数据类型&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><p>在特定场景下，数据类型之间是可以相互转换的，如字符串转数字，数字转字符串等。</p>
<ol>
<li><p>为什么要进行数据转换？</p>
<ul>
<li>从文件中读取的数字，默认是字符串，我们需要转换成数字类型</li>
<li>后续学习的input()语句，默认结果是字符串，若需要数字也需要转换</li>
<li>将数字转换成字符串用以写出到外部系统</li>
<li>等等</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为整数</span></span><br><span class="line">string_number = <span class="string">&quot;2024&quot;</span></span><br><span class="line">integer_number = <span class="built_in">int</span>(string_number)</span><br><span class="line"><span class="built_in">print</span>(integer_number)  <span class="comment"># 输出: 2024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为浮点数</span></span><br><span class="line">string_float = <span class="string">&quot;20.24&quot;</span></span><br><span class="line">float_number = <span class="built_in">float</span>(string_float)</span><br><span class="line"><span class="built_in">print</span>(float_number)  <span class="comment"># 输出: 20.24</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将整数转换为字符串</span></span><br><span class="line">int_number = <span class="number">2024</span></span><br><span class="line">string_from_int = <span class="built_in">str</span>(int_number)</span><br><span class="line"><span class="built_in">print</span>(string_from_int)  <span class="comment"># 输出: &quot;2024&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将浮点数转换为字符串</span></span><br><span class="line">float_number = <span class="number">20.24</span></span><br><span class="line">string_from_float = <span class="built_in">str</span>(float_number)</span><br><span class="line"><span class="built_in">print</span>(string_from_float)  <span class="comment"># 输出: &quot;20.24&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：浮点数转整数丢失精度</span></span><br><span class="line">float_number = <span class="number">20.74</span></span><br><span class="line">int_from_float = <span class="built_in">int</span>(float_number)</span><br><span class="line"><span class="built_in">print</span>(int_from_float)  <span class="comment"># 输出: 20，小数部分丢失</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>常见的转换语句</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>语句（函数）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int(x)</td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x转换为一个浮点数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将x转换为字符串</td>
</tr>
</tbody></table>
<ol start="3">
<li>注意事项<ul>
<li>任何数据类型都可以转字符串</li>
<li>字符串内必须有数字才能转换为数字</li>
<li>浮点数转整数会丢失精度（小数部分）<br>和前面学习的type()一样，这三个语句是带有结果的（返回值），我们可以直接print输出结果或者用变量储存结果值。</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ol>
<li>在python程序中，我们会给很多东西取名字，如<ul>
<li>变量的名字</li>
<li>方法的名字</li>
<li>类的名字<br>等等，这些名字统一称之为标识符，用来做内容的标识。</li>
</ul>
</li>
<li>标识符内容限定：只允许出现英文、数字、中文、下滑新（_）,其余任何元素都不被允许。</li>
<li>命名规则（强制）<ul>
<li>不推荐使用中文（中文支持并不完善，可能会有隐藏问题）</li>
<li>数字不可以用作开头（硬性限制）</li>
<li>区分大小写</li>
<li>不可使用关键字，如False、True、and、in<br> is等等（同样区分大小写）</li>
</ul>
</li>
<li>命名规范（不强制）<ul>
<li>变量<ol>
<li>有意义：变量名应该清晰地表达变量的用途或它所代表的数据类型。</li>
<li>简洁：在表达清晰的前提下，使用最少的名字长度。</li>
<li>下划线命名法：多个单词组合变量名，要使用下划线分割。</li>
<li>英文字母全部小写。</li>
</ol>
</li>
</ul>
</li>
<li><strong>请注意，不遵守命名规则会导致错误，而不遵守命名规范虽然不会引起错误，但会使代码的可读性和整洁度降低。</strong><br>下面是一份正确和错误的示例<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 错误示例</span></span><br><span class="line">1_name = <span class="string">&quot;老赵&quot;</span></span><br><span class="line">name_! = <span class="string">&quot;老李&quot;</span></span><br><span class="line"><span class="keyword">class</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 正确示例</span></span><br><span class="line">name_ = <span class="string">&quot;老王&quot;</span></span><br><span class="line">_name = <span class="string">&quot;老孙&quot;</span></span><br><span class="line">_Name = <span class="string">&quot;老钱&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ol>
<li>算数运算符<br>在python中，常用的数学运算符包括以下七种<table>
<thead>
<tr>
<th>序号</th>
<th>运算符</th>
<th>描述</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>+</code></td>
<td>加法</td>
<td><code>5 + 3</code></td>
<td>8</td>
</tr>
</tbody></table>
</li>
</ol>
<p>| 2    | <code>-</code>    | 减法           | <code>5 - 3</code>       | 2      |<br>| 3    | <code>*</code>    | 乘法           | <code>5 * 3</code>       | 15     |<br>| 4    | <code>/</code>    | 除法           | <code>5 / 3</code>       | 1.666… |<br>| 5    | <code>%</code>    | 求余数         | <code>5 % 3</code>       | 2      |<br>| 6    | <code>**</code>   | 幂运算         | <code>5 ** 3</code>      | 125    |<br>| 7    | <code>//</code>   | 整除           | <code>5 // 3</code>      | 1      |</p>
<ol start="2">
<li>赋值运算符<br>在Python中，赋值运算符用于将值赋给变量。基本的赋值运算符是 &#x3D;。<br>此外，还有一些复合赋值运算符，它们结合了数学运算和赋值操作。  <table>
<thead>
<tr>
<th>序号</th>
<th>运算符</th>
<th>描述</th>
<th>示例代码</th>
<th>等效于</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><code>=</code></td>
<td>基本赋值</td>
<td><code>x = 5</code></td>
<td><code>x = 5</code></td>
</tr>
</tbody></table>
</li>
</ol>
<p>| 2    | <code>+=</code>   | 加法赋值       | <code>x += 3</code>                  | <code>x = x + 3</code>             |<br>| 3    | <code>-=</code>   | 减法赋值       | <code>x -= 3</code>                  | <code>x = x - 3</code>             |<br>| 4    | <code>*=</code>   | 乘法赋值       | <code>x *= 3</code>                  | <code>x = x * 3</code>             |<br>| 5    | <code>/=</code>   | 除法赋值       | <code>x /= 3</code>                  | <code>x = x / 3</code>             |<br>| 6    | <code>%=</code>   | 取模赋值       | <code>x %= 3</code>                  | <code>x = x % 3</code>             |<br>| 7    | <code>**=</code>  | 幂运算赋值     | <code>x **= 3</code>                 | <code>x = x ** 3</code>            |<br>| 8    | <code>//=</code>  | 整除赋值      | <code>x //= 3</code>                 | <code>x = x // 3</code>            |</p>
<p>示例代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 数学运算符</span><br><span class="line">print(&quot;5+5=&quot;,5 + 5)</span><br><span class="line">print(&quot;5-5=&quot;,5 - 5)</span><br><span class="line">print(&quot;5*5=&quot;,5 * 5)</span><br><span class="line">print(&quot;5/5=&quot;,5 / 5)</span><br><span class="line">print(&quot;5%5=&quot;,5 % 5)</span><br><span class="line">print(&quot;5//5=&quot;,5//5)</span><br><span class="line"></span><br><span class="line"># 赋值运算符</span><br><span class="line">num = 1 + 2 * 4</span><br><span class="line">print(num) # 输出；9</span><br><span class="line"></span><br><span class="line"># 复合赋值运算符</span><br><span class="line"></span><br><span class="line"># 基本赋值</span><br><span class="line">x = 5</span><br><span class="line">print(x)  # 输出: 5</span><br><span class="line"></span><br><span class="line"># 加法赋值</span><br><span class="line">x += 3</span><br><span class="line">print(x)  # 输出: 8</span><br><span class="line"></span><br><span class="line"># 减法赋值</span><br><span class="line">x -= 2</span><br><span class="line">print(x)  # 输出: 6</span><br><span class="line"></span><br><span class="line"># 乘法赋值</span><br><span class="line">x *= 4</span><br><span class="line">print(x)  # 输出: 24</span><br><span class="line"></span><br><span class="line"># 除法赋值</span><br><span class="line">x /= 3</span><br><span class="line">print(x)  # 输出: 8.0</span><br><span class="line"></span><br><span class="line"># 取模赋值</span><br><span class="line">x %= 5</span><br><span class="line">print(x)  # 输出: 3</span><br><span class="line"></span><br><span class="line"># 幂运算赋值</span><br><span class="line">x **= 2</span><br><span class="line">print(x)  # 输出: 9</span><br><span class="line"></span><br><span class="line"># 整除赋值</span><br><span class="line">x //= 2</span><br><span class="line">print(x)  # 输出: 4.0</span><br></pre></td></tr></table></figure>

<h4 id="字符串拓展内容"><a href="#字符串拓展内容" class="headerlink" title="字符串拓展内容"></a>字符串拓展内容</h4><h5 id="字符串三种定义方式"><a href="#字符串三种定义方式" class="headerlink" title="字符串三种定义方式"></a>字符串三种定义方式</h5><ol>
<li>在Python编程语言中，我们通常认为用双引号（” “）包围的字符序列是字符串。然而，为了更精确地表达，我们应当注意到，实际上，无论是单引号（’ ‘）、双引号（” “）、还是三引号（””” “”” 或 ‘’’ ‘’’）包围的字符序列，都可以被视为字符串。</li>
</ol>
<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单引号定义法</span></span><br><span class="line">name = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#双引号定义法</span></span><br><span class="line">name = <span class="string">&quot;李四&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三引号定义法（可以像注释一样可以换行）</span></span><br><span class="line">name = <span class="string">&quot;&quot;&quot;这里的文字可以换行，比如这是第一行</span></span><br><span class="line"><span class="string">这是第二行</span></span><br><span class="line"><span class="string">这是第三行</span></span><br><span class="line"><span class="string">在终端中他们分别占据一行</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(name))</span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure>

<p>在终端中他们应该这样显示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">张三</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">李四</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">这里的文字可以换行，比如这是第一行</span><br><span class="line">这是第二行</span><br><span class="line">这是第三行</span><br><span class="line">在终端中他们分别占据一行</span><br></pre></td></tr></table></figure>

<ul>
<li><p>那么就出现了一个问题， 如果<strong>要定义的字符串本身包括单引号或者双引号</strong>，怎么办呢？</p>
<ol>
<li>使用不同类型的引号：如果字符串本身包含单引号，可以使用双引号来定义字符串；反之亦然。</li>
</ol>
<ul>
<li><p>示例代码</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;&quot;张三&quot;&#x27;</span></span><br><span class="line">name_1 = <span class="string">&quot;&#x27;李四&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name,name_1,)</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果应该是：</p>
</li>
</ul>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;张三&quot;</span> <span class="string">&#x27;李四&#x27;</span> </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>转义字符：在字符串中，可以通过在引号前加上反斜杠 <strong>()</strong> 来转义引号，使其成为普通字符。</li>
</ol>
<ul>
<li>例如打印如下文本：</li>
</ul>
<blockquote>
<p>Mao Zedong said: “The world is yours, as well as ours, but in the final analysis, it is yours. You young people are full of vigor and vitality, like the sun at eight or nine o’clock in the morning. The hope is placed upon you.”</p>
</blockquote>
<ul>
<li>示例代码</li>
</ul>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Mao Zedong said: &quot;The world is yours, as well as ours, but in the final analysis, it is yours. You young people are full of vigor and vitality, like the sun at eight or nine o\&#x27;clock in the morning. The hope is placed upon you.&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>  这里在o’clock的引号前加了一个 *<em>*</em> 把单引号变成普通字符，输出结果应该是</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Mao Zedong said: <span class="string">&quot;The world is yours, as well as ours, but in the final analysis, it is yours. You young people are full of vigor and vitality, like the sun at eight or nine o&#x27;clock in the morning. The hope is placed upon you.&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>1957年11月，毛泽东同志在莫斯科大学发表“希望寄托在你们身上”著名讲话：<br>毛泽东说：“世界是你们的，也是我们的，但是归根结底是你们的。你们青年人朝气蓬勃，正在兴旺时期，好像早晨八九点钟的太阳。希望寄托在你们身上。”<br>Mao Zedong said: “The world is yours, as well as ours, but in the final analysis, it is yours. You young people are full of vigor and vitality, like the sun at eight or nine o’clock in the morning. The hope is placed upon you.”<br>来自<a href="https://www.youth.cn/">https://www.youth.cn</a></p>
</blockquote>
<p>2.总结<br>    1.字符串的三种定义方式：<br>    - 单引号方式<br>    - 双引号方式<br>    - 三引号方式<br>    2. 引号的嵌套<br>        - 可以使用：\来进行转义<br>         - 单引号内可以写双引号或双引号内可以写单引号</p>
<h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><ol>
<li>如果我们有两个字符串（文本）字面量，可以将其拼接成一个字符串，通过+号即可完成，如</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>（<span class="string">&quot;abc&quot;</span>+<span class="string">&quot;def&quot;</span>）</span><br></pre></td></tr></table></figure>

<p>输出结果应该是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abcdef</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>不过一般，单纯的2个字符串字面量进行拼接没什么意义，字面量和变量或变量和变量之间才会使用拼接，如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = <span class="string">&quot;libai&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is &quot;</span> + A)</span><br></pre></td></tr></table></figure>
<p>输出结果应该是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my name <span class="keyword">is</span> libai</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>要注意，拼接操作无法和非字符串类型进行拼接。</li>
</ol>
<h5 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h5><ul>
<li><p>在频繁使用字符串拼接的过程中，我们可能会遇到一些不便：</p>
<ol>
<li>当涉及的变量数量增多时，进行字符串拼接变得繁琐且容易出错。</li>
<li>直接将字符串与其他数据类型（如数字）拼接时，会遇到类型不匹配的问题。</li>
</ol>
</li>
<li><p>这里我们用另一种方法，使用”%s”。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我今天上了%s节课&quot;</span> % <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello%s&quot;</span> % <span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s年,%s专业平均月工资是%s&quot;</span> %(<span class="number">2024</span>,<span class="string">&quot;计算机&quot;</span>,<span class="string">&quot;八万&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>结果应该是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我今天上了<span class="number">10</span>节课</span><br><span class="line">helloworld</span><br><span class="line"><span class="number">2024</span>年,计算机专业平均月工资是八万</span><br></pre></td></tr></table></figure></li>
<li><p>另外，我们也有其他的数据类型占位符，下面是一些常用的占位符，使用方法和%s一致。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>格式符号</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>%s</td>
<td>将内容转换成字符串，放入占位位置</td>
</tr>
<tr>
<td>%d</td>
<td>将内容转换成整数，放入占位位置</td>
</tr>
<tr>
<td>%f</td>
<td>将内容转换成浮点型，放入占位位置</td>
</tr>
</tbody></table>
<h5 id="掌握格式化字符串的过程中做数字的精度控制"><a href="#掌握格式化字符串的过程中做数字的精度控制" class="headerlink" title="掌握格式化字符串的过程中做数字的精度控制"></a>掌握格式化字符串的过程中做数字的精度控制</h5><ul>
<li><p>我们可以使用辅助符号”m.n”来控制数据的宽度和精度</p>
<ul>
<li>m，控制宽度，要求是数字（很少使用），设置的宽度小于数字自身，不生效</li>
<li>n，控制小数点精度，要求是数字，会进行小数的四舍五入</li>
</ul>
</li>
<li><p>m和n均可省略</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1 = <span class="number">23</span></span><br><span class="line">num2 = <span class="number">22.25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;今天我吃了%5d顿饭&quot;</span> % num1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;今天我花了%32.2f元&quot;</span> % num2)</span><br></pre></td></tr></table></figure>
<p>结果是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">今天我吃了   <span class="number">23</span>顿饭</span><br><span class="line">今天我花了                           <span class="number">22.25</span>元</span><br></pre></td></tr></table></figure>
<p>这里有空格的原因是：num2不足32位，用空格补全。</p>
</li>
</ul>
<h5 id="字符串格式化方式2"><a href="#字符串格式化方式2" class="headerlink" title="字符串格式化方式2"></a>字符串格式化方式2</h5><ul>
<li>确实，使用 % 符号进行字符串格式化既方便又灵活，它还允许我们控制输出的精度。不过，除了这种方法，还有其他几种格式化字符串的方式可以考虑：<ul>
<li>通过 <strong>f”内容{变量}”</strong> 来实现</li>
</ul>
</li>
<li>这种方式有两个特点<ul>
<li>不做精度控制</li>
<li>不限数据类型</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num1 = <span class="number">23</span></span><br><span class="line">num2 = <span class="number">22.25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;今天我吃了<span class="subst">&#123;num1&#125;</span>顿饭&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;今天我花了<span class="subst">&#123;num2&#125;</span>元&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>结果应该是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">今天我吃了23顿饭</span><br><span class="line">今天我花了22.25元</span><br></pre></td></tr></table></figure>
<h5 id="对表达式进行格式化"><a href="#对表达式进行格式化" class="headerlink" title="对表达式进行格式化"></a>对表达式进行格式化</h5><ol>
<li>表达式定义：表达式：一条具有明确执行结果的代码语句。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1*1的结果是%d&quot;</span> % (<span class="number">1</span>*<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1*1的结果是<span class="subst">&#123;<span class="number">1</span>*<span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串在Python中的类型名是：%s&quot;</span> % <span class="built_in">type</span>(<span class="string">&quot;字符串&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>结果是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1*1的结果是1</span><br><span class="line">1*1的结果是1</span><br><span class="line">字符串在Python中的类型名是：&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>
<h4 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h4>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>名言收录</title>
    <url>/2024/10/06/%E5%90%8D%E8%A8%80%E6%94%B6%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="名言收录"><a href="#名言收录" class="headerlink" title="名言收录"></a>名言收录</h1><blockquote>
<p>这篇文章的收录始于2024年10月6日。对于那些作者身份不明的名言，我们以“佚名”来代替，以示尊重和纪念那些无名的智慧贡献者。<br>本文章会持续更新。<br>当然，对于这些名言，我没有意图去对它们进行分类，仅仅是在阅读时记录下来。</p>
</blockquote>
<ol>
<li><p>“世界是你们的，也是我们的，但是归根结底是你们的。你们青年人朝气蓬勃，正在兴旺时期，好像早晨八九点钟的太阳。希望寄托在你们身上。” <strong>————毛泽东</strong></p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>post</title>
    <url>/2025/10/01/post/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><iframe width="560" height="315" src="https://www.youtube.com/embed/k_sX2QRMUoo?si=41wgQKImS_oWQcSY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=115145741238659&bvid=BV1moa2zkEuh&cid=32156811888&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
  </entry>
</search>
